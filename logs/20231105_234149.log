

---------- Outline Creation Feedback Conversation Starting ----------


basic_chat: Admin -> Outline_Writer
Admin (to Outline_Writer):


Create an outline for a podcast that gives an introduction around the discography of Fleetwood Mac.

FORMAT

ARTIST: [Insert Artist/Band Name Here]

INTRODUCTION (3-5 minutes)
- Briefly introduce the artist/band, emphasizing their significance in the music industry.
- Pose a trivia question that encapsulates an interesting aspect of the artist's/band's career, which the episode will later reveal.
- Highlight a signature track that introduces the artist's/band's style, or was their breakthrogh, whatever seems interesting.

----------

ERA 1: [Era Name] ([Years]) ([x] minutes of speech)
- Summary: Outline the general theme and musical direction of this era.
- Tracks: Curate a mix of hits and lesser-known tracks (with 10 tracks in total across all eras).
- Anecdotes/Stories: Share engaging stories from this time period, including personal or interband dynamics.
- Notable Releases: Discuss any significant album or single releases.
- If applicabe: Awards/Recognition: Mention any accolades received during this era. Concerts/Tours: Reflect on memorable live performances or tours.

ERA 2: [Era Name] ([Years]) ([x] minutes of speech)
- ...
- ...
...

(Repeat the same format for subsequent eras as necessary.)

CONCLUSION (2-3 minutes)
- Recap the artist's/band's musical journey, reflecting on the transformation and legacy.
- Answer the trivia question, tying it back to the information presented throughout the episode.
- Suggest must-listen releases
- Close with a track that represents the culmination of the artist's/band's musical exploration or their lasting influence.
    

--------------------------------------------------------------------------------
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/kbverlaan/GitProjects/autogen-podcast/autogen_podcast/main.py", line 70, in main
    _, strategy_messages = outline_creation_orchestrator.feedback_conversation(prompt)
  File "/Users/kbverlaan/GitProjects/autogen-podcast/autogen_podcast/modules/orchestrator.py", line 209, in feedback_conversation
    self.basic_chat(agent_a, agent_b, self.latest_message)
  File "/Users/kbverlaan/GitProjects/autogen-podcast/autogen_podcast/modules/orchestrator.py", line 79, in basic_chat
    reply = agent_b.generate_reply(sender=agent_a)
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/autogen/agentchat/conversable_agent.py", line 781, in generate_reply
    final, reply = reply_func(self, messages=messages, sender=sender, config=reply_func_tuple["config"])
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/autogen/agentchat/conversable_agent.py", line 606, in generate_oai_reply
    response = oai.ChatCompletion.create(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/autogen/oai/completion.py", line 803, in create
    response = cls.create(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/autogen/oai/completion.py", line 826, in create
    return cls._get_response(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/autogen/oai/completion.py", line 222, in _get_response
    response = openai_completion.create(**config)
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 155, in create
    response, _, api_key = requestor.request(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/openai/api_requestor.py", line 289, in request
    result = self.request_raw(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/openai/api_requestor.py", line 606, in request_raw
    result = _thread_context.session.request(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/requests/sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/requests/sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/requests/adapters.py", line 486, in send
    resp = conn.urlopen(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/urllib3/connectionpool.py", line 791, in urlopen
    response = self._make_request(
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/urllib3/connectionpool.py", line 537, in _make_request
    response = conn.getresponse()
  File "/Users/kbverlaan/Library/Caches/pypoetry/virtualenvs/autogen-podcast-AeYdH5Jj-py3.10/lib/python3.10/site-packages/urllib3/connection.py", line 461, in getresponse
    httplib_response = super().getresponse()
  File "/Users/kbverlaan/miniforge3/lib/python3.10/http/client.py", line 1374, in getresponse
    response.begin()
  File "/Users/kbverlaan/miniforge3/lib/python3.10/http/client.py", line 318, in begin
    version, status, reason = self._read_status()
  File "/Users/kbverlaan/miniforge3/lib/python3.10/http/client.py", line 279, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Users/kbverlaan/miniforge3/lib/python3.10/socket.py", line 705, in readinto
    return self._sock.recv_into(b)
  File "/Users/kbverlaan/miniforge3/lib/python3.10/ssl.py", line 1274, in recv_into
    return self.read(nbytes, buffer)
  File "/Users/kbverlaan/miniforge3/lib/python3.10/ssl.py", line 1130, in read
    return self._sslobj.read(len, buffer)
KeyboardInterrupt
